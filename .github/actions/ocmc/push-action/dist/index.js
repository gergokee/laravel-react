"use strict";const spawn=require("child_process").spawn,path=require("path"),https=require("https"),get=(e,t={})=>new Promise((r,s)=>https.get(e,t,t=>{const o=[];t.on("data",e=>o.push(e)),t.on("end",()=>{const n=Buffer.concat(o).toString("utf-8");return t.statusCode<200||t.statusCode>300?s(Object.assign(new Error(`Invalid status code '${t.statusCode}' for url '${e}'`),{res:t,body:n})):r(n)})}).on("error",s)),exec=(e,t=[],r={})=>new Promise((s,o)=>spawn(e,t,{stdio:"inherit",...r}).on("close",e=>0!==e?o(Object.assign(new Error(`Invalid exit code: ${e}`),{code:e})):s(e)).on("error",o)),trimLeft=(e,t="/")=>e.replace(new RegExp(`^[${t}]*`),""),trimRight=(e,t="/")=>e.replace(new RegExp(`[${t}]*$`),""),trim=(e,t)=>trimLeft(trimRight(e,t)),main=async()=>{let e=process.env.INPUT_BRANCH;const t=trim(process.env.INPUT_REPOSITORY||process.env.GITHUB_REPOSITORY);if(!e){const r={"User-Agent":""};process.env.INPUT_GITHUB_TOKEN&&(r.Authorization=`token ${process.env.INPUT_GITHUB_TOKEN}`),e=JSON.parse(await get(`https://api.github.com/repos/${t}`,{headers:r})).default_branch}await exec("bash",[path.join(__dirname,"./../start.sh")],{env:{...process.env,INPUT_BRANCH:e,INPUT_REPOSITORY:t}})};main().catch(e=>{console.error(e),console.error(e.stack),process.exit(e.code||-1)});
